package uni.eagle.quickblit.Graphics.Filter;

import uni.eagle.quickblit.General.Interfaces.iCustomFilter;

import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;

public class GaussianFilter implements iCustomFilter {
    /**
     * @brief führt die Filteroperation auf das jeweilige Bild durch
     *
     * @param image Das Bild für die Operation
     * @return das Bild nach der Operation
     */
    public static BufferedImage processImage(BufferedImage image) {
        /*float[] gaussMatrix1 = {
        0.0030f,  0.0133f,    0.0219f,    0.0133f,    0.0030f,
        0.0133f,  0.0596f,    0.0983f,    0.0596f,    0.0133f,
        0.0219f,  0.0983f,    0.1621f,    0.0983f,    0.0219f,
        0.0133f,  0.0596f,    0.0983f,    0.0596f,    0.0133f,
        0.0030f,  0.0133f,    0.0219f,    0.0133f,    0.0030f};*/
        /* Sigma = 0.55
        0.032258	0.115089	0.032258
        0.115089	0.410612	0.115089
        0.032258	0.115089	0.032258
         */
        //Generated by: http://dev.theomader.com/gaussian-kernel-calculator/ with sigma = 0.4
        float[] gaussMatrix1 = {0.011147f,0.083286f,0.011147f,
                                0.083286f,0.622269f,0.083286f,
                                0.011147f,0.083286f,0.011147f
        };
        BufferedImageOp gaussFilter = new ConvolveOp(new Kernel(3, 3, gaussMatrix1),
                ConvolveOp.EDGE_NO_OP, null);
        return gaussFilter.filter(image, null);
    }
}
